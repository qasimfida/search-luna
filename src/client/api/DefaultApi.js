/**
 * Luna Paint API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Color from '../model/Color';
import HTTPValidationError from '../model/HTTPValidationError';
import Recipe from '../model/Recipe';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the recipeRecipeColorIdGet operation.
     * @callback module:api/DefaultApi~recipeRecipeColorIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recipe
     * @param {String} colorId 
     * @param {module:api/DefaultApi~recipeRecipeColorIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    recipeRecipeColorIdGet(colorId, callback) {
      let postBody = null;
      // verify the required parameter 'colorId' is set
      if (colorId === undefined || colorId === null) {
        throw new Error("Missing the required parameter 'colorId' when calling recipeRecipeColorIdGet");
      }

      let pathParams = {
        'color_id': colorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Recipe;
      return this.apiClient.callApi(
        '/recipe/{color_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSearchGet operation.
     * @callback module:api/DefaultApi~searchSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Color>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search
     * @param {String} q 
     * @param {module:api/DefaultApi~searchSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Color>}
     */
    searchSearchGet(q, callback) {
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling searchSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Color];
      return this.apiClient.callApi(
        '/search/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
